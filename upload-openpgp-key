#!/usr/bin/env bash

# Here is a great selection of info about Yubikey and gpg
# https://xladius.com/opsec/2018/06/25/using-yubikeys-for-openpgp

# Some handy GPG commands
# https://github.com/yankhobacisse/nitrokey/blob/3130f7241d31f8b90d4b561a9f4d757b983343c0/peopleInfo.sh

YKMAN_BIN="ykman"
GPG_BIN="gpg"

YUBKEY_LIST=("")

# Fix for GPG error
# https://github.com/keybase/keybase-issues/issues/2798
export GPG_TTY=$(tty)

function check_required_programs() {
  command -v ykman >/dev/null 2>&1 || { echo >&2 "I require ykman but it's not installed.  Aborting."; echo >&2 "https://github.com/Yubico/yubikey-manager"; exit 1; }
  command -v gpg >/dev/null 2>&1 || { echo >&2 "I require gpg but it's not installed.  Aborting."; exit 1; }
  command -v sed >/dev/null 2>&1 || { echo >&2 "I require sed but it's not installed.  Aborting."; exit 1; }
  command -v grep >/dev/null 2>&1 || { echo >&2 "I require grep but it's not installed.  Aborting."; exit 1; }
  command -v dd >/dev/null 2>&1 || { echo >&2 "I require dd but it's not installed.  Aborting."; exit 1; }
  command -v tr >/dev/null 2>&1 || { echo >&2 "I require tr but it's not installed.  Aborting."; exit 1; }
  command -v cut >/dev/null 2>&1 || { echo >&2 "I require cut but it's not installed.  Aborting."; exit 1; }
}

function trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

function get_connected_yubikeys() {
  OFS=$IFS
  IFS=$'\n'
  declare -a YUBKEY_LIST=(`$YKMAN_BIN list`)
  IFS=$OFS
  if [ ${#YUBKEY_LIST[@]} -eq 0 ]; then
    echo "No Yubikeys Found!"
    exit 1
  elif [ ${#YUBKEY_LIST[@]} -gt 1 ]; then
    echo "Multiple Yubikeys Found!"
    echo "Please Select One:"
    for i in "${!YUBKEY_LIST[@]}"; do
      echo " $i) ${YUBKEY_LIST[i]}"
    done
    echo " q) Quit"
    while true; do
        read -p '# ' n
        if [ "$n" == "q" ]; then
          echo "Exited!"
          exit 1
        fi
        # Check if number
        re='^[0-9]+$'
        if ! [[ $n =~ $re ]]; then
          continue
        fi
        # If $n is an integer between one and $count...
        if [ "$n" -eq "$n" ] && [ "$n" -gt -1 ] && [ "$n" -le "${#YUBKEY_LIST[@]}" ]; then
          break
        fi
    done
    CURRENT_YUBIKEY_SERIAL=${YUBKEY_LIST[$n]#*"Serial: "}
    echo "You Selected Device: ${YUBKEY_LIST[$n]}"
  else
    CURRENT_YUBIKEY_SERIAL=${YUBKEY_LIST[0]#*"Serial: "}
    echo " - Found Device Device: ${YUBKEY_LIST[$n]}"
  fi
}

function warn_user() {
  echo "*** WARNING ***"
  read -r -p " This will completely reset your Yubikey. Are you sure? [y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY])
      ;;
    *)
      echo "Exited!"; exit 1
      ;;
  esac
}

function reset_openpgp_data() {
  {
  	echo admin
  	echo factory-reset
  	echo y
  	echo yes
    echo quit
  } | $GPG_BIN \
    --command-fd=0 --status-fd=1 \
    --batch --quiet --no-greeting \
    --card-edit
}

function change_openpgp_pin() {
  PINCODE=$1
  PASSWD_FD_NUM=9
  PASSWD_FD_FILE="/tmp/foo"
  eval "exec ${PASSWD_FD_NUM}<>${PASSWD_FD_FILE}"
  eval "echo "$PINCODE">&${PASSWD_FD_NUM}"
  {
  	echo admin
  	echo passwd
  	echo 1
  	echo Q
  	echo quit
  } | $GPG_BIN \
    --command-fd=0 --status-fd=1 \
    --pinentry-mode loopback \
    --passphrase-fd=$PASSWD_FD_NUM \
    --batch --quiet --no-greeting \
    --card-edit
  eval "exec ${PASSWD_FD_NUM}>&-"
}

function open_fd() {
  STATUS_FD_NUM=9
  ERROR_FD_NUM=8
  STATUS_FD_FILE=`mktemp /tmp/gpg.XXXXXXXXXX` || { echo "Unable to make temp file!"; exit 1; }
  ERROR_FD_FILE=`mktemp /tmp/gpg.XXXXXXXXXX` || { echo "Unable to make temp file!"; exit 1; }
  eval "exec ${STATUS_FD_NUM}<>${STATUS_FD_FILE}"
  eval "exec ${ERROR_FD_NUM}<>${ERROR_FD_FILE}"
  OUTPUT=""
  STATUS=""
}

function close_fd() {
  # Cleanup File Descriptors
  [[ "$STATUS_FD_NUM" != "" ]] && eval "exec ${STATUS_FD_NUM}>&-"
  [[ "$ERROR_FD_NUM" != "" ]] && eval "exec ${ERROR_FD_NUM}>&-"
  [ -f "$ERROR_FD_FILE" ] && OUTPUT=`cat "$ERROR_FD_FILE"`
  [ -f "$STATUS_FD_FILE" ] && STATUS=`cat "$STATUS_FD_FILE"`
  [ -f "$PASSWD_FILE" ] && rm "$PASSWD_FILE"
  [ -f "$STATUS_FD_FILE" ] && rm "$STATUS_FD_FILE"
  [ -f "$ERROR_FD_FILE" ] && rm "$ERROR_FD_FILE"
}

function get_admin_passwd_file() {
  if [[ "$ADMIN_PINCODE" == "" ]]; then
    ADMIN_PINCODE="12345678"
  fi
  PASSWD_FILE=`mktemp /tmp/gpg.XXXXXXXXXX` || { echo "Unable to make temp file!"; exit 1; }
  echo -e $ADMIN_PINCODE>"${PASSWD_FILE}"
  kill_gpg_agent
}

function remove_admin_passwd_file() {
  [ -f "$PASSWD_FILE" ] && rm "$PASSWD_FILE"
}

function reset_openpgp_data() {
  open_fd
  {
  	echo admin
  	echo factory-reset
  	echo y
  	echo yes
    echo quit
  } | $GPG_BIN \
    --command-fd=0 --logger-fd=$ERROR_FD_NUM --status-fd=$STATUS_FD_NUM \
    --batch --quiet --no-greeting \
    --card-edit 2> /dev/null
  close_fd
}

function change_key_sizes() {
  ADMIN_PINCODE="$1"
  if [[ "$ADMIN_PINCODE" == "" ]]; then
    ADMIN_PINCODE="12345678"
  fi
  open_fd
  get_admin_passwd_file "$ADMIN_PINCODE"
  # The algorithms supported by nitrokey pro are rsa 2048 at rsa 4096
  # change in the size of the keys
  {
  	echo admin       # To have the right to exude the admin rights
  	echo key-attr    # to change the length of keys or algorithms
  	echo 1           # (1) RSA (2) ECC RSA for the signature ie here the only supported algorithm
  	echo 2048        # 2048-4096 the size of the signature subkey
  	echo 1           # (1) RSA (2) ECC RSA for encryption subkey
  	echo 2048        # 2048-4096 the size of the subkey of encryption
  	echo 1           # (1) RSA (2) ECC RSA for the authentication subkey
  	echo 2048        # 2048-4096 the size of the subkey authentication
  	echo quit
  } | $GPG_BIN \
    --command-fd=0 --logger-fd=$ERROR_FD_NUM --status-fd=$STATUS_FD_NUM \
    --passphrase-file "$PASSWD_FILE" \
    --pinentry-mode loopback \
    --batch --quiet --no-greeting \
    --card-edit 2> /dev/null
  close_fd
  remove_admin_passwd_file
}

function generate_keys() {
  # Generation of a pair of keys in the token without a local copy
  {
  	echo admin        # To have the right to exude the admin rights
  	echo generate     # to generate the keys in the token
  	echo n            # (o / n) no local copy
  	echo 0            # the key never expires
  	echo O            # yes yes confirmation
  	echo  " $KEY_OWNER_NAME "      # the real name of the owner of the keys
  	echo  " $KEY_EMAIL "      # the email address of the owner of the keys
  	echo nocomment # no comment
  	echo o            # yes confirmation of information for key
  	echo list         # display information in the map
  	echo quit
  } | $GPG_BIN \
    --command-fd=0 --status-fd=1 \
    --pinentry-mode loopback \
    --passphrase-fd=$PASSWD_FD_NUM \
    --batch --quiet --no-greeting \
    --card-edit
  eval "exec ${PASSWD_FD_NUM}>&-"
}

# Pass a second value to change chaching time hwen it restarts
function kill_gpg_agent() {
  # Stupidly the only solution to stop GPG agent caching passwords is to kill it, not to worry it will restart automatically
  # https://unix.stackexchange.com/questions/193588/how-can-i-tell-gpg-that-i-do-not-want-password-caching-for-a-specific-program
  if [[ $1 == "" ]]; then
    pkill gpg-agent
  else
    pkill gpg-agent && gpg-agent --default-cache-ttl $1 --use-standard-socket --daemon
  fi
}

function personalise_smart_card() {
  ADMIN_PINCODE="$1"
  if [[ "$ADMIN_PINCODE" == "" ]]; then
    ADMIN_PINCODE="12345678"
  fi
  FIRST_NAME="$2"
  LAST_NAME="$3"
  LOGIN="$4"
  URL="$5"
  SEX="u"
  LANG="en"

  open_fd
  get_admin_passwd_file "$ADMIN_PINCODE"

  # Personalization of the smart card
  {
  	echo admin    # To execute the administrator rights
  	# echo passwd   # To change the user or administrator PIN
  	# echo 1        # Change administrator PIN
  	# echo q        # Leave the PIN change
  	echo name     # To change the user name
  	echo  " $LAST_NAME "     # User's response
  	echo  " $FIRST_NAME "     # Username
    [[ "$LOGIN" != "" ]] && { echo login; echo " $LOGIN "; }
    echo sex
    [[ "$SEX" != "" ]] && echo " $SEX " || echo " u "
    [[ "$LANG" != "" ]] && { echo lang; echo " $LANG "; }
    [[ "$URL" != "" ]] && { echo url; echo " $URL "; }
  	# echo list     # show map information
  	echo quit     # when editing the map
  } | $GPG_BIN \
    --command-fd=0 --logger-fd=$ERROR_FD_NUM --status-fd=$STATUS_FD_NUM \
    --passphrase-file "$PASSWD_FILE" \
    --pinentry-mode loopback \
    --batch --quiet --no-greeting \
    --card-edit 2> /dev/null
  close_fd
  remove_admin_passwd_file

  if [[ "$OUTPUT" != "" ]]; then
    # Try to handle some errors nicely
    if echo "$OUTPUT" | grep -q "gpg: error setting Name: Bad PIN"; then
      echo "ERROR! Bad Pin for card"
      exit 1
    elif echo "$OUTPUT" | grep -q "gpg: selecting openpgp failed: Operation not supported by device"; then
      echo "ERROR! Missing Card?"
      exit 1
    elif echo "$OUTPUT" | grep -q "gpg: "; then
      echo "$OUTPUT" | grep "gpg: "
      exit 1
    else
      echo "ERROR!"
      echo "$OUTPUT"
      exit 1
    fi
  fi
}

function get_gpg_card_info() {
  CARD_INFO=`$GPG_BIN --card-status --with-colons`
  CARD_SERIAL=`echo "$CARD_INFO" | grep "serial:" | cut -f2 -d':'`
  CARD_READER_NAME=`echo "$CARD_INFO" | grep "Reader:" | cut -f2 -d':'`
  CARD_READER_VERSION=`echo "$CARD_INFO" | grep "version:" | cut -f2 -d':'`
  CARD_READER_VENDOR_NAME=`echo "$CARD_INFO" | grep "vendor:" | cut -f3 -d':'`
  CARD_DETAILS_FIRST_NAME=`echo "$CARD_INFO" | grep "name:" | cut -f2 -d':'`
  CARD_DETAILS_LAST_NAME=`echo "$CARD_INFO" | grep "name:" | cut -f3 -d':'`
  CARD_DETAILS_SEX=`echo "$CARD_INFO" | grep "sex:" | cut -f2 -d':'`
  CARD_DETAILS_LANG=`echo "$CARD_INFO" | grep "lang:" | cut -f2 -d':'`
  CARD_DETAILS_URL=`echo "$CARD_INFO" | grep "url:" | cut -f2 -d':'`
  CARD_DETAILS_LOGIN=`echo "$CARD_INFO" | grep "login:" | cut -f2 -d':'`
  CARD_DETAILS_FORCEPIN=`echo "$CARD_INFO" | grep "forcepin:" | cut -f2 -d':'`

  # Reader:Yubico Yubikey 4 CCID:AID:23423432:openpgp-card:
  # version:0201:
  # vendor:0006:Yubico:
  # serial:242424:
  # name:FirstBlah:SecondBlah:
  # lang::
  # sex:u:
  # url::
  # login::
  # forcepin:0:::
  # keyattr:1:1:2048:
  # keyattr:2:1:2048:
  # keyattr:3:1:2048:
  # maxpinlen:127:127:127:
  # pinretry:3:0:3:
  # sigcount:0:::
  # cafpr::::
  # fpr::::
  # fprtime:0:0:0:
  # grp:0000000000000000000000000000000000000000:0000000000000000000000000000000000000000:0000000000000000000000000000000000000000:

  # OFS=$IFS
  # IFS=$'\n'
  # declare -a CARD_INFO=(`gpg --card-status --with-colons`)
  # IFS=$OFS
}

echo "# Checking System Setup"
check_required_programs
echo "# Checking for Yubikeys"
get_connected_yubikeys
echo "# Checking for available certificates"
# SELECT CERTIFICATE TO LOAD

echo "# Resetting OpenPGP Data on Card"
reset_openpgp_data
echo "# Personalising OpenPGP Info on Card"
# READ THIS INFO FROM THE YAML FILE
personalise_smart_card "" "Test" "Test2" "Logintest" ""
echo "# Changing Key Sizes"
change_key_sizes
echo "# Loading Certificates to Yubikey"
# LOAD CERTIFICATES HERE

echo "# Cleaning Up"
# REMOVE TEMPORARY TRUSTDB HERE

echo "# Getting Card Info"
get_gpg_card_info
echo
echo "SERIAL: $CARD_SERIAL"
echo "READER: $CARD_READER_NAME"
echo "VERSION: $CARD_READER_VERSION"
echo "VENDOR: $CARD_READER_VENDOR_NAME"
echo "FIRST NAME: $CARD_DETAILS_FIRST_NAME"
echo "LAST NAME: $CARD_DETAILS_LAST_NAME"
echo "SEX: $CARD_DETAILS_SEX"
echo "LANG: $CARD_DETAILS_LANG"
echo "URL: $CARD_DETAILS_URL"
echo "LOGIN: $CARD_DETAILS_LOGIN"
echo "FORCE PIN: $CARD_DETAILS_FORCEPIN"

exit 0
